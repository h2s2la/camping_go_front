{"version":3,"sources":["utils/axiosHandler.js","api/board.js","components/@extended/DataTable.js","pages/board/Board.js"],"names":["axiosInstance","axios","create","baseURL","process","paramsSerializer","params","qs","stringify","interceptors","request","use","config","err","Promise","reject","response","data","POST_URL","getPostList","a","get","createPost","post","getPost","id","deletePost","delete","updatePost","put","DataTable","columns","rows","rowsPerPageOptions","isLoading","rowClick","useState","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","sx","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","width","label","TableBody","colSpan","Box","py","minHeight","CircularProgress","slice","row","hover","tabIndex","onClick","e","cursor","value","render","TablePagination","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","Board","navigate","useNavigate","setData","setLoading","useEffect","findPostList","Grid","container","direction","justifyContent","spacing","item","Button","variant","postId"],"mappings":"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","file":"static/js/12.554dfd0a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs';\r\n\r\nconst axiosInstance = axios.create({\r\n\tbaseURL: process.env.REACT_APP_API_SERVER,\r\n\tparamsSerializer: (params) => qs.stringify(params),\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n\t(config) => {\r\n\t\treturn config;\r\n\t},\r\n\t(err) => {\r\n\t\t// eslint-disable-next-line no-undef\r\n\t\treturn Promise.reject(err);\r\n\t},\r\n);\r\n\r\naxiosInstance.interceptors.response.use(({data: response}) => {\r\n\treturn response;\r\n});\r\nexport default axiosInstance;\r\n\r\n","import {default as axios} from 'utils/axiosHandler';\r\n\r\nconst POST_URL = '/api/v1/posts';\r\n\r\n// [1 게시판] 게시글 리스트 읽기(get)\r\nexport const getPostList = async () => axios.get(POST_URL);\r\n\r\n// [2 게시글 작성] Todo: 게시글 생성(post)\r\nexport const createPost = async (params) => axios.post(POST_URL, params); // export const createPost = 작성해주세요.\r\n\r\n// [3 게시글 상세] 게시글 읽기(get)정\r\nexport const getPost = async ({id}) => axios.get(`${POST_URL}/${id}`);\r\n\r\n// [3 게시글 상세] Todo: 게시글 지우기(delete)\r\nexport const deletePost = async ({id}) => axios.delete(`${POST_URL}/${id}`); // export const deletePost = 작성해주세요.\r\n\r\n// [4 게시글 수정] Todo: 게시글 수정(put)\r\nexport const updatePost = async ({id}, params) =>\r\n\taxios.put(`${POST_URL}/${id}`, params); // export const updatePost = 작성해주세요.\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TableHead, TableBody, TableCell, TableContainer, TablePagination, TableRow, Table, Box, CircularProgress } from '@mui/material';\r\n\r\nconst DataTable = ({ columns, rows, rowsPerPageOptions = [10, 25, 100], isLoading, rowClick }) => {\r\n\tconst [page, setPage] = useState(0);\r\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n\tconst handleChangeRowsPerPage = (event) => {\r\n\t\tsetRowsPerPage(+event.target.value);\r\n\t\tsetPage(0);\r\n\t};\r\n\r\n\tconst handleChangePage = (event, newPage) => {\r\n\t\tsetPage(newPage);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<TableContainer sx={{ maxHeight: 440 }}>\r\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'} style={{ width: column.width }}>\r\n\t\t\t\t\t\t\t\t\t{column.label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{!isLoading ? (\r\n\t\t\t\t\t\t\trows &&\r\n\t\t\t\t\t\t\trows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tkey={row.id}\r\n\t\t\t\t\t\t\t\t\t\tonClick={rowClick ? (e) => rowClick(e, row) : () => {}}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.render ? column.render(row) : value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\" colSpan={6}>\r\n\t\t\t\t\t\t\t\t\t<Box sx={{ py: 3, minHeight: 560 }}>\r\n\t\t\t\t\t\t\t\t\t\t<CircularProgress />\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t\t<TablePagination\r\n\t\t\t\trowsPerPageOptions={rowsPerPageOptions}\r\n\t\t\t\tcomponent=\"div\"\r\n\t\t\t\tcount={rows ? rows.length : 0}\r\n\t\t\t\trowsPerPage={rowsPerPage}\r\n\t\t\t\tpage={page}\r\n\t\t\t\tonPageChange={handleChangePage}\r\n\t\t\t\tonRowsPerPageChange={handleChangeRowsPerPage}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default DataTable;\r\n\r\nDataTable.propTypes = {\r\n\tcolumns: PropTypes.array,\r\n\trows: PropTypes.array,\r\n\trowsPerPageOptions: PropTypes.array,\r\n\tisLoading: PropTypes.bool,\r\n\trowClick: PropTypes.func\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Button, Grid} from '@mui/material';\r\nimport DataTable from 'components/@extended/DataTable';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {getPostList} from 'api/board';\r\n\r\nconst Board = () => {\r\n\t// [이벤트 매핑] useNavigate에서 navigate 가져오기\r\n\tconst navigate = useNavigate();\r\n\r\n\t//[api 연결] data(기본값 : []), isLoading(기본값 : false)을 컴포넌트 State로 선언(useState)\r\n\tconst [data, setData] = useState([]);\r\n\tconst [isLoading, setLoading] = useState(false);\r\n\r\n\t//\r\n\tuseEffect(() => {\r\n\t\t// [api 연결] 로딩 시 게시글 리스트 api 호출 함수 실행\r\n\t\tfindPostList();\r\n\t}, []);\r\n\r\n\tconst findPostList = async () => {\r\n\t\t// [api 연결] isLoading의 상태값 변경(로딩중이면 true, 아니면 false)\r\n\t\tsetLoading(true);\r\n\r\n\t\t// [api 연결] Todo: api/board.js에서 게시글 리스트 api 호출 후 결과 받기\r\n\t\tconst response = await getPostList(); // 작성해주세요.\r\n\r\n\t\t// [api 연결] Todo: data에 결과 매핑하기\r\n\t\tsetData(response); // 작성해주세요.\r\n\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst moveCreatePostPage = () => {\r\n\t\t// [이벤트 매핑] Todo: 글쓰기 페이지로 이동(/post/write)\r\n\t\tnavigate('/post/write'); // 작성해주세요.\r\n\t};\r\n\r\n\tconst rowClick = (e, row) => {\r\n\t\t// [이벤트 매핑] Todo: row 에서 게시글 id 받아오기(row.id)\r\n\t\tconst postId = row.id; // 작성해주세요.\r\n\r\n\t\t// [이벤트 매핑] Todo: 게시글 상세 페이지(/post/:id) 로 이동\r\n\t\tnavigate(`/post/${postId}`); // 작성해주세요.\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tdirection='row'\r\n\t\t\t\tjustifyContent='flex-end'\r\n\t\t\t\tspacing={2}\r\n\t\t\t>\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<Button variant='contained' onClick={moveCreatePostPage}>\r\n\t\t\t\t\t\t글쓰기\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<DataTable\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\trows={data}\r\n\t\t\t\trowsPerPageOptions={[10, 20, 30]}\r\n\t\t\t\tisLoading={isLoading}\r\n\t\t\t\trowClick={rowClick}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Board;\r\n\r\n// [이벤트 매핑] DataTable에 들어갈 columns 설정\r\nconst columns = [\r\n\t{\r\n\t\tid: 'title',\r\n\t\tlabel: '제목',\r\n\t\twidth: 290,\r\n\t\talign: 'left',\r\n\t},\r\n\t{\r\n\t\tid: 'author',\r\n\t\tlabel: '작성자',\r\n\t\twidth: 60,\r\n\t\talign: 'left',\r\n\t},\r\n];\r\n"],"sourceRoot":""}