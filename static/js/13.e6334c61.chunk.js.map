{"version":3,"sources":["utils/axiosHandler.js","api/board.js","pages/board/Post.js"],"names":["axiosInstance","axios","create","baseURL","process","paramsSerializer","params","qs","stringify","interceptors","request","use","config","err","Promise","reject","response","data","POST_URL","getPostList","a","get","createPost","post","getPost","id","deletePost","delete","updatePost","put","Post","enqueueSnackbar","useSnackbar","navigate","useNavigate","useParams","useState","setPost","isDeleteLoading","setDeleteLoading","useEffect","findPost","goBackList","deleteClick","variant","state","title","content","direction","spacing","container","item","onClick","justifyContent","style","marginRight","color","loading","sx","p","borderRadius","marginTop","flex","component","xs","htmlFor","author","placeholder","py","minHeight","textAlign"],"mappings":"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","file":"static/js/13.e6334c61.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs';\r\n\r\nconst axiosInstance = axios.create({\r\n\tbaseURL: process.env.REACT_APP_API_SERVER,\r\n\tparamsSerializer: (params) => qs.stringify(params),\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n\t(config) => {\r\n\t\treturn config;\r\n\t},\r\n\t(err) => {\r\n\t\t// eslint-disable-next-line no-undef\r\n\t\treturn Promise.reject(err);\r\n\t},\r\n);\r\n\r\naxiosInstance.interceptors.response.use(({data: response}) => {\r\n\treturn response;\r\n});\r\nexport default axiosInstance;\r\n\r\n","import {default as axios} from 'utils/axiosHandler';\r\n\r\nconst POST_URL = '/api/v1/posts';\r\n\r\n// [1 게시판] 게시글 리스트 읽기(get)\r\nexport const getPostList = async () => axios.get(POST_URL);\r\n\r\n// [2 게시글 작성] Todo: 게시글 생성(post)\r\nexport const createPost = async (params) => axios.post(POST_URL, params); // export const createPost = 작성해주세요.\r\n\r\n// [3 게시글 상세] 게시글 읽기(get)정\r\nexport const getPost = async ({id}) => axios.get(`${POST_URL}/${id}`);\r\n\r\n// [3 게시글 상세] Todo: 게시글 지우기(delete)\r\nexport const deletePost = async ({id}) => axios.delete(`${POST_URL}/${id}`); // export const deletePost = 작성해주세요.\r\n\r\n// [4 게시글 수정] Todo: 게시글 수정(put)\r\nexport const updatePost = async ({id}, params) =>\r\n\taxios.put(`${POST_URL}/${id}`, params); // export const updatePost = 작성해주세요.\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {deletePost, getPost} from 'api/board';\r\nimport {\r\n\tBox,\r\n\tButton,\r\n\tCard,\r\n\tCardContent,\r\n\tCircularProgress,\r\n\tDivider,\r\n\tGrid,\r\n\tInputLabel,\r\n\tStack,\r\n\tToolbar,\r\n\tTypography,\r\n} from '@mui/material';\r\nimport {LoadingButton} from '@mui/lab';\r\nimport {useSnackbar} from 'notistack';\r\n\r\nconst Post = () => {\r\n\t// [api 연결] useSnackbar에서 enqueueSnackbar 가져오기\r\n\tconst {enqueueSnackbar} = useSnackbar();\r\n\r\n\t// [이벤트 매핑] useNavigate에서 navigate 가져오기\r\n\tconst navigate = useNavigate();\r\n\r\n\t//url에서 param 가져오기\r\n\tconst {id} = useParams();\r\n\r\n\t// [api 연결] Todo: post(기본값 : null), isDeleteLoading(기본값 : false)을 컴포넌트 State로 선언(useState)\r\n\t// 작성해주세요. >>11\r\n\tconst [post, setPost] = useState(null);\r\n\tconst [isDeleteLoading, setDeleteLoading] = useState(false); // isDeleteLoading을 state로 선언해주세요. >>11\r\n\t//const [isLoading, setLoading] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t// [api 연결] Todo: 로딩 시 게시글 상세 api 호출 함수 실행\r\n\t\tfindPost(); // 작성해주세요.\r\n\t}, [id]);\r\n\r\n\tconst findPost = async () => {\r\n\t\t// [api 연결] Todo: 게시글 상세 api 호출 후 결과 받기\r\n\t\tconst response = await getPost({id}); // 작성해주세요. >>12\r\n\t\t// [api 연결] Todo: post에 api 호출 결과값 매핑\r\n\t\tsetPost(response); //// 작성해주세요.\r\n\t};\r\n\r\n\tconst goBackList = () => {\r\n\t\t// [이벤트 매핑] Todo: 게시판 페이지로 이동\r\n\t\tnavigate('/board'); // 작성해주세요. >>1\r\n\t};\r\n\r\n\tconst deleteClick = async () => {\r\n\t\ttry {\r\n\t\t\t// [api 연결] Todo: 중복 api 호출 방지를 위해 isDeleteLoading 상태 true로 변경\r\n\t\t\tsetDeleteLoading(true); // 작성해주세요.\r\n\r\n\t\t\t// [api 연결] Todo: 게시글 삭제 api 호출\r\n\t\t\t//const response = await deletePost({id}); // 작성해주세요. >>13\r\n\t\t\tawait deletePost({id}); // 작성해주세요. >>13\r\n\r\n\t\t\tenqueueSnackbar('게시글이 삭제되었습니다.', {variant: 'success'});\r\n\r\n\t\t\t// [api 연결] Todo: 중복 api 호출 후 delete 버튼 활성화를 위해 isDeleteLoading false로 변경\r\n\t\t\tsetDeleteLoading(false); // 작성해주세요.\r\n\r\n\t\t\t// [이벤트 매핑] Todo: 게시판 페이지로 이동\r\n\t\t\tgoBackList(); // 작성해주세요. >>2\r\n\t\t} catch (err) {\r\n\t\t\tenqueueSnackbar(err, {variant: 'error'});\r\n\t\t\tsetDeleteLoading(false); // 작성해주세요.// [api 연결] Todo: 중복 api 호출 후 delete 버튼 활성화를 위해 isDeleteLoading false로 변경\r\n\t\t}\r\n\t};\r\n\r\n\tconst updatePost = async () => {\r\n\t\t// [이벤트 매핑] 게시글 수정 페이지로 이동. 상태 값을 같이 전달\r\n\t\tnavigate(`/post/update`, {\r\n\t\t\tstate: {\r\n\t\t\t\tid: id,\r\n\t\t\t\ttitle: post.title,\r\n\t\t\t\tcontent: post.content,\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Stack direction='row' spacing={2}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t// [이벤트 매핑] Todo: 목록 버튼을 클릭하면 게시글 목록페이지 페이지로 이동해야 합니다.\r\n\t\t\t\t\t\t\tonClick={goBackList} // onClick={매핑해주세요.} >>3\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t목록\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container justifyContent='flex-end'>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t\t\t// [이벤트 매핑] Todo: 수정 버튼을 클릭하면 게시글 수정 페이지로 이동해야 합니다.\r\n\t\t\t\t\t\t\tonClick={updatePost} // onClick={매핑해주세요.} >>4\r\n\t\t\t\t\t\t\tstyle={{marginRight: 10}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t수정\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<LoadingButton\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t// [이벤트 매핑] Todo: 삭제 버튼을 클릭하면 게시글 삭제 api가 호출됩니다.\r\n\t\t\t\t\t\t\tonClick={deleteClick} // onClick={매핑해주세요.} >>5\r\n\t\t\t\t\t\t\tcolor='error'\r\n\t\t\t\t\t\t\t// [api 연결] Todo: isLoading이 true면 버튼이 비활성화 됩니다. isDeleteLoading을 매핑해주세요.\r\n\t\t\t\t\t\t\tloading={isDeleteLoading} // loading={매핑해주세요.}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t삭제\r\n\t\t\t\t\t\t</LoadingButton>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Stack>\r\n\t\t\t<Card sx={{p: 2}} style={{borderRadius: '8px', marginTop: 15}}>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tsx={{flex: '1 1 100%'}}\r\n\t\t\t\t\t\tvariant='h4'\r\n\t\t\t\t\t\tid='tableTitle'\r\n\t\t\t\t\t\tcomponent='div'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{post?.title ? post.title : ''}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t\t<Divider />\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t{post ? (\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Stack spacing={1}>\r\n\t\t\t\t\t\t\t\t<Grid container justifyContent='flex-end'>\r\n\t\t\t\t\t\t\t\t\t<InputLabel htmlFor='desc-signup'>\r\n\t\t\t\t\t\t\t\t\t\t{'작성자 : '}\r\n\t\t\t\t\t\t\t\t\t\t{post.author}\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tvariant='body1'\r\n\t\t\t\t\t\t\t\t\taria-label='maximum height'\r\n\t\t\t\t\t\t\t\t\tplaceholder='내용'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{post.content}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tsx={{py: 3, minHeight: 560}}\r\n\t\t\t\t\t\t\tstyle={{textAlign: 'center'}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<CircularProgress />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}